/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const DEFAULT_SETTINGS = {
    redditApiUrl: 'https://www.reddit.com',
    saveLocation: '',
    useTimestampedDirectories: false,
    fileFormat: 'markdown',
    overwriteExistingFile: false,
    loginOnStartup: false,
    clientId: '',
    clientSecret: '',
    updateCheckOnStartup: true,
    lastUpdateCheck: 0
};
class RedditMarkdownPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addCommand({
                id: 'fetch-reddit-post',
                name: 'Fetch Reddit Post',
                callback: () => {
                    new RedditUrlModal(this.app, (url) => {
                        this.fetchAndSavePost(url);
                    }).open();
                }
            });
            this.addSettingTab(new RedditMarkdownSettingTab(this.app, this));
            if (this.settings.loginOnStartup) {
                yield this.login();
            }
            if (this.settings.updateCheckOnStartup) {
                yield this.checkForUpdates();
            }
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.settings.clientId || !this.settings.clientSecret) {
                new obsidian.Notice('Client ID and Client Secret must be set to log in.');
                return;
            }
            const response = yield obsidian.request({
                url: 'https://www.reddit.com/api/v1/access_token',
                method: 'POST',
                headers: {
                    'Authorization': `Basic ${btoa(`${this.settings.clientId}:${this.settings.clientSecret}`)}`,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: 'grant_type=client_credentials'
            });
            const data = JSON.parse(response);
            this.accessToken = data.access_token;
            if (this.accessToken) {
                new obsidian.Notice('Successfully logged in to Reddit.');
            }
            else {
                new obsidian.Notice('Failed to log in to Reddit.');
            }
        });
    }
    checkForUpdates() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = new Date().getTime();
            // Check for updates every 24 hours
            if (now - this.settings.lastUpdateCheck < 24 * 60 * 60 * 1000) {
                return;
            }
            this.settings.lastUpdateCheck = now;
            yield this.saveSettings();
            try {
                const response = yield obsidian.request({
                    url: 'https://api.github.com/repos/chauduyphanvu/reddit-markdown/releases/latest',
                });
                const data = JSON.parse(response);
                const latestVersion = data.tag_name;
                const currentVersion = this.manifest.version;
                if (latestVersion > currentVersion) {
                    new obsidian.Notice(`A new version of Reddit Markdown is available: ${latestVersion}. Please update the plugin.`);
                }
            }
            catch (error) {
                console.error('Error checking for updates:', error);
            }
        });
    }
    fetchAndSavePost(url) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                new obsidian.Notice(`Fetching post from: ${url}`);
                const postUrl = `${this.settings.redditApiUrl}${new URL(url).pathname}.json`;
                const headers = {};
                if (this.accessToken) {
                    headers['Authorization'] = `Bearer ${this.accessToken}`;
                }
                const response = yield obsidian.request({ url: postUrl, headers });
                const data = JSON.parse(response);
                const post = data[0].data.children[0].data;
                const comments = data[1].data.children;
                let markdown = `# ${post.title}\n\n`;
                markdown += `**Author:** /u/${post.author}\n`;
                markdown += `**Subreddit:** ${post.subreddit_name_prefixed}\n`;
                markdown += `**Score:** ${post.score}\n`;
                markdown += `**URL:** ${post.url}\n\n`;
                markdown += `---\n\n`;
                markdown += `${post.selftext}\n\n`;
                markdown += `---\n\n## Comments\n\n`;
                comments.forEach((comment) => {
                    if (comment.kind === 't1') {
                        markdown += `**${comment.data.author}** (${comment.data.score}):\n\n`;
                        markdown += `${comment.data.body}\n\n`;
                    }
                });
                let finalContent = markdown;
                if (this.settings.fileFormat === 'html') {
                    // A simple conversion, for a real implementation, a library would be better
                    finalContent = markdown.replace(/\n/g, '<br>');
                }
                let filePath = this.settings.saveLocation;
                if (this.settings.useTimestampedDirectories) {
                    const now = new Date();
                    const year = now.getFullYear();
                    const month = (now.getMonth() + 1).toString().padStart(2, '0');
                    const day = now.getDate().toString().padStart(2, '0');
                    filePath += `${year}-${month}-${day}/`;
                }
                if (filePath !== '' && !(yield this.app.vault.adapter.exists(filePath))) {
                    yield this.app.vault.createFolder(filePath);
                }
                const fileName = `${post.title.replace(/[^\w\s]/gi, '')}.${this.settings.fileFormat}`;
                const fullPath = `${filePath}${fileName}`;
                const fileExists = yield this.app.vault.adapter.exists(fullPath);
                if (fileExists && !this.settings.overwriteExistingFile) {
                    new obsidian.Notice('File already exists. To overwrite, enable "Overwrite Existing File" in settings.');
                    return;
                }
                yield this.app.vault.adapter.write(fullPath, finalContent);
                new obsidian.Notice(`Successfully saved post to ${fullPath}`);
            }
            catch (error) {
                new obsidian.Notice("Error fetching or saving post. See console for details.");
                console.error(error);
            }
        });
    }
}
class RedditMarkdownSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Reddit Markdown Settings' });
        new obsidian.Setting(containerEl)
            .setName('Reddit API URL')
            .setDesc('The base URL for the Reddit API.')
            .addText(text => text
            .setPlaceholder('https://www.reddit.com')
            .setValue(this.plugin.settings.redditApiUrl)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.redditApiUrl = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Save Location')
            .setDesc('The default location to save Reddit posts. If empty, it will save to the vault root.')
            .addText(text => text
            .setPlaceholder('reddit-posts/')
            .setValue(this.plugin.settings.saveLocation)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.saveLocation = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Use Timestamped Directories')
            .setDesc('Create a new directory for each day’s posts (e.g., YYYY-MM-DD).')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.useTimestampedDirectories)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.useTimestampedDirectories = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('File Format')
            .setDesc('Choose the file format for saved posts.')
            .addDropdown(dropdown => dropdown
            .addOption('markdown', 'Markdown')
            .addOption('html', 'HTML')
            .setValue(this.plugin.settings.fileFormat)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fileFormat = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Overwrite Existing File')
            .setDesc('If a file with the same name already exists, overwrite it.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.overwriteExistingFile)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.overwriteExistingFile = value;
            yield this.plugin.saveSettings();
        })));
        containerEl.createEl('h3', { text: 'Authentication' });
        new obsidian.Setting(containerEl)
            .setName('Login on Startup')
            .setDesc('Automatically log in to Reddit when Obsidian starts.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.loginOnStartup)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.loginOnStartup = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Client ID')
            .setDesc('The client ID for your Reddit application.')
            .addText(text => text
            .setPlaceholder('Your Reddit client ID')
            .setValue(this.plugin.settings.clientId)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.clientId = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Client Secret')
            .setDesc('The client secret for your Reddit application.')
            .addText(text => text
            .setPlaceholder('Your Reddit client secret')
            .setValue(this.plugin.settings.clientSecret)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.clientSecret = value;
            yield this.plugin.saveSettings();
        })));
        containerEl.createEl('h3', { text: 'Updates' });
        new obsidian.Setting(containerEl)
            .setName('Check for Updates on Startup')
            .setDesc('Automatically check for new versions of the plugin when Obsidian starts.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.updateCheckOnStartup)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.updateCheckOnStartup = value;
            yield this.plugin.saveSettings();
        })));
    }
}
class RedditUrlModal extends obsidian.Modal {
    constructor(app, onSubmit) {
        super(app);
        this.onSubmit = onSubmit;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl("h2", { text: "Enter Reddit Post URL" });
        new obsidian.Setting(contentEl)
            .addText((text) => {
            text.setPlaceholder("https://www.reddit.com/...");
            text.onChange((value) => {
                this.url = value;
            });
        });
        new obsidian.Setting(contentEl)
            .addButton((btn) => btn
            .setButtonText("Fetch")
            .setCta()
            .onClick(() => {
            this.close();
            this.onSubmit(this.url);
        }));
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

module.exports = RedditMarkdownPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
